class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key


def insert(root, key):
    if root is None:
        return Node(key)
    else:
        if root.val < key:
            root.right = insert(root.right, key)
        else:
            root.left = insert(root.left, key)
    return root


def search(root, key):
    if root is None or root.val == key:
        return root

    if root.val < key:
        return search(root.right, key)

    return search(root.left, key)


def deleteNode(root, key):
    if root is None:
        return root

    if key < root.val:
        root.left = deleteNode(root.left, key)
    elif key > root.val:
        root.right = deleteNode(root.right, key)
    else:
        if root.left is None:
            temp = root.right
            root = None
            return temp

        elif root.right is None:
            temp = root.left
            root = None
            return temp

        temp = minValueNode(root.right)
        root.val = temp.val
        root.right = deleteNode(root.right, temp.val)

    return root


def minValueNode(node):
    current = node
    while current.left is not None:
        current = current.left
    return current


def solve(Q, queries):
    result = []
    root = None

    for query in queries:
        if query[0] == 0:
            root = insert(root, query[1])
        elif query[0] == 1:
            if search(root, query[1]):
                result.append(1)
                root = deleteNode(root, query[1])
            else:
                result.append(0)

    return result


# Example Usage
Q = 3
queries = [[0, 1], [1, 1], [1, 1]]
print(solve(Q, queries))  # Output: [1, 0]
